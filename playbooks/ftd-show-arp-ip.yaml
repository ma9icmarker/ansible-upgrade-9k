---

- hosts: Boston_Test
  gather_facts: false
  become: true
  connection: network_cli

  tasks:

    - name: include vars
      include_vars:
        file: ../group_vars/.cisco.yaml

    - name: Connect to FTD and run show arp using custom module
      ftd_send_command:
        username: "{{ ftd.username }}"
        ip_address: "172.18.129.89"
        password: "{{ ftd.password }}"
        commands:
          - show arp
        expected_strings:
          - "outside150"
      register: show_arp

    - name: Debug show_arp
      debug:
        var: show_arp

    - name: Debug show_arp.msg[0]
      debug:
        var: show_arp.msg[0]

    - name: Convert ARP table output to structured data
      set_fact:
        arp_table: "{{ arp_table | default([]) + [{'interface_name': item.split()[0], 'ipaddress': item.split()[1], 'macaddress': item.split()[2], 'age': item.split()[3] | int}] }}"
      loop: "{{ show_arp.msg[0].splitlines() }}"
      when: item | regex_search('\\S+\\s+\\S+\\s+\\S+\\s+\\S+') and not item | regex_search('^show arp')


    - name: Display the structured ARP table
      debug:
        var: arp_table


    - name: Convert ARP table list to dictionary with interface_name as key
      set_fact:
        arp_dict: >-
          {{
            arp_dict | default({}) | 
            combine({ 
              item['interface_name']: 
              (arp_dict[item['interface_name']] | default([])) + [item]
            })
          }}
      loop: "{{ arp_table }}"
      when: arp_table is defined

    - name: Display the ARP dictionary
      debug:
        var: arp_dict




    - name: Connect to FTD and run show ip command with custom module
      ftd_send_command:
        username: "{{ ftd.username }}"
        ip_address: "172.18.129.89"
        password: "{{ ftd.password }}"
        commands:
          - show ip
        expected_strings:
          - "outside150"
      register: show_ip
#      failed_when: "'Could not resolve hostname' in ssh_output.msg or 'permission denied' in ssh_output.msg"

    - name: Debug command outputs
      debug:
        var: show_ip

    - name: Filter lines starting with Port-channel
      # Using Jinja2 templating directly within set_fact for clarity
      set_fact:
        filtered_lines: "{{ show_ip.msg[0].split('\n') | select('match', '^Port-channel.*') | list }}"

    - name: Debug filtered lines
      debug:
        var: filtered_lines

    - name: Split filtered_lines into a list
      set_fact:
        filtered_lines_list: "{{ filtered_lines | regex_replace('\\\\n|\\\\r|\\[|\\]', '') | regex_replace(\"'\", '') | regex_replace(' manual', '') | regex_replace('Port-channel', '\\nPort-channel') | regex_replace(' +', ' ') | regex_replace('^\\s+|\\s+$', '') | split('\\n') }}"
      # Consider optimizing these regex replacements if possible

    - name: Debug filtered lines list
      debug:
        var: filtered_lines_list

    - name: Extract VLAN IDs without any VLAN filter
      set_fact:
        vlan_ids: "{{ filtered_lines | regex_findall('Port-channel20\\.([0-9]+)') }}"

    - name: debug vlan_ids
      debug:
        var: vlan_ids

    - name: Define desired VLANs
      set_fact:
        desired_vlans:
          - 1420
          - 1421


    - name: Extract VLAN IDs
      set_fact:
        vlan_ids: "{{ desired_vlans | list }}"

    - name: Debug desired VLANs
      debug: 
        var: desired_vlans 

    - name: Split each line into components
      set_fact:
        line_components: "{{ filtered_lines_list | map('regex_replace', ' ,', '') | map('split', '\n') | flatten | map('split', ' ') | list }}"

    - name: Create dictionaries from line components
      set_fact:
        interfaces: "{{ interfaces | default([]) + [ { item[0]: {'interface_name': item[1], 'ipaddress': item[2], 'subnetmask': item[3]} } ] }}"
      loop: "{{ line_components }}"
      # Loop over each line component to create an interface dictionary

    - name: Debug the interfaces list
      debug:
        var: interfaces

    - name: Set VLAN ID for each interface
      set_fact:
        interfaces_with_vlan: "{{ interfaces_with_vlan | default([]) + [{(item.keys() | first): item[(item.keys() | first)] | combine({'vlan_id': (item.keys() | first).split('.')[1]}) }] }}"
      loop: "{{ interfaces }}"
      loop_control:
        loop_var: item

    - name: Debug the interfaces with VLAN list
      debug:
        var: interfaces_with_vlan

    - name: Filter interfaces by desired VLANs
      set_fact:
        filtered_interfaces: "{{ filtered_interfaces | default([]) + [item] }}"
      loop: "{{ interfaces_with_vlan }}"
      when: "(item.values() | first).vlan_id | string in desired_vlans | map('string') | list"

    - name: Debug the filtered interfaces
      debug:
        var: filtered_interfaces

    - name: Test VLAN ID lookup for a known interface
      vars:
        test_interface: "DMZ_WLAN_GUEST"  # Replace with the interface name you want to test
      set_fact:
        vlan_id_test: "{{ item[item.keys() | first]['vlan_id'] }}"
      loop: "{{ filtered_interfaces }}"
      when: 
        - item[item.keys() | first].get('interface_name') == test_interface
        - "'vlan_id' in item[item.keys() | first]"
      no_log: False

    - debug:
        var: vlan_id_test

    - name: Flatten filtered interfaces
      set_fact:
        flattened_interfaces: "{{ flattened_interfaces | default([]) + [item[item.keys() | first]] }}"
      loop: "{{ filtered_interfaces }}"


    - name: Debug VLAN ID lookup for each ARP entry
      debug:
        msg: "Interface: {{ item.key }}, VLAN ID: {{ 
          flattened_interfaces | 
          selectattr('interface_name', 'equalto', item.key) | 
          map(attribute='vlan_id') | 
          first | 
          default('Unknown') }}"
      loop: "{{ arp_dict | dict2items }}"
      loop_control:
        loop_var: item





    - name: Add VLAN ID to ARP entries based on interface_name
      set_fact:
        arp_dict: >-
          {{
            arp_dict | combine({
              item.key: item.value | map('combine', {
                'vlan_id': (
                  flattened_interfaces | 
                  selectattr('interface_name', 'equalto', item.key) | 
                  map(attribute='vlan_id') | 
                  first | 
                  default('Unknown')
                )
              }) | list
            }, recursive=true)
          }}
      loop: "{{ arp_dict | dict2items }}"
      loop_control:
        loop_var: item






    - name: Debug arp_dict
      debug: 
        var: arp_dict

    - name: Create a list of entries with known VLAN IDs
      set_fact:
        known_vlan_entries: >-
          {{
            known_vlan_entries | default([]) + 
            [item.value | selectattr('vlan_id', 'defined') | selectattr('vlan_id', 'ne', 'Unknown') | list]
          }}
      loop: "{{ arp_dict | dict2items }}"
      loop_control:
        loop_var: item

    - name: Flatten known VLAN entries
      set_fact:
        flat_known_vlan_entries: "{{ flat_known_vlan_entries | default([]) + item }}"
      loop: "{{ known_vlan_entries }}"
      loop_control:
        label: "{{ item }}"

    - name: Reconstruct arp_dict with only known VLAN IDs
      set_fact:
        filtered_arp_dict: >-
          {{
            filtered_arp_dict | default({}) | 
            combine({ item.interface_name: 
            (filtered_arp_dict[item.interface_name] | default([])) + [item] })
          }}
      loop: "{{ flat_known_vlan_entries }}"
      loop_control:
        loop_var: item


    - name: Debug filtered ARP dictionary
      debug:
        var: filtered_arp_dict


    - meta: end_play






