---
- hosts: Boston_Test
  gather_facts: false
  become: true
  connection: network_cli

  tasks:
    - name: Include vars
      include_vars:
        file: ../group_vars/.cisco.yaml

    - name: Test modules
      ftd_send_command:
        username: "{{ ftd.username }}"
        ip_address: "172.18.129.89"
        password: "{{ ftd.password }}"
        commands:
          - show ip
        expected_strings:
          - "outside150"
      register: show_ip

    - name: Debug show ip
      debug:
        var: show_ip

    - name: Filter lines starting with Port-channel
      # Using Jinja2 templating directly within set_fact for clarity
      set_fact:
        filtered_lines: "{{ show_ip.msg[0].split('\n') | select('match', '^Port-channel.*') | list }}"

    - name: Debug filtered lines
      debug:
        var: filtered_lines

    - name: Split filtered_lines into a list
      set_fact:
        filtered_lines_list: "{{ filtered_lines | regex_replace('\\\\n|\\\\r|\\[|\\]', '') | regex_replace(\"'\", '') | regex_replace(' manual', '') | regex_replace('Port-channel', '\\nPort-channel') | regex_replace(' +', ' ') | regex_replace('^\\s+|\\s+$', '') | split('\\n') }}"
      # Consider optimizing these regex replacements if possible

    - name: Debug filtered lines list
      debug:
        var: filtered_lines_list

    - name: Extract VLAN IDs without any VLAN filter
      set_fact:
        vlan_ids: "{{ filtered_lines | regex_findall('Port-channel20\\.([0-9]+)') }}"

    - name: debug vlan_ids
      debug:
        var: vlan_ids

    - name: Define desired VLANs
      set_fact:
        desired_vlans:
          - 1421
          - 1411

    - name: Extract VLAN IDs
      set_fact:
        vlan_ids: "{{ desired_vlans | list }}"

    - name: Debug desired VLANs
      debug: 
        var: desired_vlans 

    - name: Split each line into components
      set_fact:
        line_components: "{{ filtered_lines_list | map('regex_replace', ' ,', '') | map('split', '\n') | flatten | map('split', ' ') | list }}"

    - name: Create dictionaries from line components
      set_fact:
        interfaces: "{{ interfaces | default([]) + [ { item[0]: {'interface_name': item[1], 'ipaddress': item[2], 'subnetmask': item[3]} } ] }}"
      loop: "{{ line_components }}"
      # Loop over each line component to create an interface dictionary

    - name: Debug the interfaces list
      debug:
        var: interfaces

    - name: Set VLAN ID for each interface
      set_fact:
        interfaces_with_vlan: "{{ interfaces_with_vlan | default([]) + [{(item.keys() | first): item[(item.keys() | first)] | combine({'vlan_id': (item.keys() | first).split('.')[1]}) }] }}"
      loop: "{{ interfaces }}"
      loop_control:
        loop_var: item

    - name: Debug the interfaces with VLAN list
      debug:
        var: interfaces_with_vlan

    - name: Filter interfaces by desired VLANs
      set_fact:
        filtered_interfaces: "{{ filtered_interfaces | default([]) + [item] }}"
      loop: "{{ interfaces_with_vlan }}"
      when: "(item.values() | first).vlan_id | string in desired_vlans | map('string') | list"

    - name: Debug the filtered interfaces
      debug:
        var: filtered_interfaces
